======СКРИПТЫ НА BASH======
скрипты нужны чтобы автоматизировать какие-либо действия в системе и использовать в дальнейшем для работы 

#!/bin/bash -вначале любого скрипта необходимо указать интерпретатор, который будет выполнять данный скрипт. дання означает, что данный скрипт является скриптом bash.
#! - особая комбинация символов, которая означает интерпретатор на который следует передать вывполнение ниже написанный команда, указывается путь к испольняеммому файлу нашего интепретатора, можно указывать любой интепретатор, который необходимо использовать, например если пишем скрипт на python, то указываем #!/usr/bin/python3

.sh	-расширение скрипта
chmod a+x script.sh	-после создания скрипта нужно назначить права на исполнение для нашего файла

чтобы запусть скрипт необходимо указать полный путь к файлу, если мы находимся в той же папке что и скрипт, то можно запустить скрипт командой 
./script.sh
	-запустить скрипт, иначе необходимо указывать полный путь к исполняемому файлу

bash script.sh
	-команда для запуска скрипта в оболочке bash

./script.sh - также запускает скрипт, при условии, что:
	1. первая строка в скрипте #!/bin/bash
	2. файл является исполняемым

echo "Hello world" - вывод на экран Hello world

string="hello world" -создание переменной string со значением hello world
string2=hello world -по умолчанию в переменные записываются строковые данные, поэтому указывать кавычки не обязательно
$string - Обращение к значение переменной происходит через знак $
echo $string -выводит на экран значение переменной string, т.е. будет выводить hello world

stringbig=$string$string2 -конкатенация двух строк и присваивание итогового значения переменной stringbig

$() -конструкция используется для присвоения переменной результата выполнения некой команды, например
string2=$(date) 

Параметры скрипта.
echo $1 $3 - внутри скрипта идет обращение к первому и третьему параметрам, соответственно чтобы их выполнить необходимо запустить команду
./sripth.sh 123 345 678
вывод будет:
123 678

ниже программа, которая выводит на экран сообщение, с просьбой ввести значение переменной var1, после ввода переменной присваивается значение и значение выводится на экран
echo "please set var1"
read var1
echo $var1

if [[ $1 > $2 ]]	условие
then 
echo $1 
else 				иначе
echo $2
fi 					завершающая конструкция, обязательно ее устанавливаем, образовано от слова final

операторы
> -больше, аналогичен оператору для чисел -gt
< -меньше, аналогичен оператору для чисел -lt
-eq -равенство (от equal)
-ne -не равенство (от not equal)

циклы
for index in $(ls) - вмесето $(ls) можно использовать ряд чисел, например 1 2 3 4 5
do
echo $index 
done	-завершающая конструкция

циклы можно прописывать в строку прямо в терминале, например:
for i in 1 2 3 4 5; do echo $i; done
1
2
3
4
5

while - условный цикл

read var
while [[$var -lt 5]]
do
echo $var
let "var=var+1" -все что в двойных кавычках воспринимается как арифмитическая операция, которая будет выполнена командой let. команда let в скриптах выполняет арифмитические действия
done

echo - выводит сообщение на экран
echo "Hello world!"
$ - обозначение переменной

$variable - локальная переменная
$HOME - глобальная переменная
\$ - способ написать текстовый символ $
usr = "Admin" - присвоение переменной текстового значения (необходимо брать в кавычки)
lavel = 100 - присвоение переменной числа

сложение переменных
num_1 = 5
num_2 = 7
let num_3 = $num_1 + $num_2

циклы

if grep --quiet lessons /etc/passwd			- если, --quiet - ключ, который убирает 
											результат выполнения команды grep
then 								- тогда
		echo "вывести сообщение"
else
		echo "вывести сообщение_2"
fi									- закрывает цикл

read username - аналог команды input в Python

if (($num_4 > 0)); then echo "Число положительное"		- необходимо использовать двойные скобки. знак ";"
														говорит, что некая сущность проверилась на истинность или ложь
elif ((num_4 < 0 )); then echo "Число отрицательное"
else echo "Вы выбрали ноль!"
fi

mydir=$(pwd) - присвоить переменной mydir результата выполнения команды pwd
var1=$(( 5 + 5 )) - для выполнения математических операций $((a+b))

user=anotherUser
if grep $user /etc/passwd
then
echo "The user $user Exists"
elif ls /home
then
echo "The user doesn’t exist but anyway there is a directory under /home"
fi